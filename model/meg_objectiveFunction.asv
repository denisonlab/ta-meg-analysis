function [E, yhat] = objectiveFunction(x,data,t,Fs,paramNames,fitType)
% Define objective function to minimize for fconmin
% August 2023 KT
% Inputs:
%   data: t x 
%   x: initial coefficients for search
%   t: time vector 
%   Fs: sampling frequency, if not defined default to 1000 Hz 
% Ouputs 
%   E: root mean square error 
%   yhat: predicted model output

% Function: 
% y = A * sin(B(x + C)) + D; 
% amplitude = A 
% period = 2*pi/B 
% frequency = 1/period 
% From FFt we know the frequency to fit is 2 Hz , so B = 2/2*pi
% vertical shift = D 
% horizontal shift = C 

%% 
% For 2 Hz frequency, at 1000 Hz sampling rate, then period = 500 samples
% B = 2*pi/period
% B = 2*pi/(500) = 0.0126

% yhat = sin(t); % basic for testing 
% yhat = x(1) * sin(2*pi/(500)*(t + x(2)*Fs/pi)); 
% period = 2*pi/x(4); % fixed freq to 2 Hz

if nargin<4 % if no sampling frequency provided, default to 1000 Hz
    Fs = 1000;
end

if nargin<5
    paramNames = {'intercept1','slope1','amplitude1','phase1',...
              'intercept2','slope2','amplitude2','phase2',...
              'freq'};
end

if nargin<6
    fitType = 'linear';
end

%% Translate starting coefficients into meaningful vars 

% --- Intercept --- 
idx = find(contains(paramNames,'intercept1')); 
intercept1 = x(idx);
idx = find(contains(paramNames,'intercept2')); 
intercept2 = x(idx);

% --- Slope --- 
idx = find(contains(paramNames,'slope1')); 
slope1 = x(idx);
idx = find(contains(paramNames,'slope2')); 
slope2 = x(idx);

% --- Amplitude --- 
idx = find(contains(paramNames,'amplitude1')); 
amplitude1 = x(idx);
idx = find(contains(paramNames,'amplitude2')); 
amplitude2 = x(idx);

% --- Phase --- 
idx = find(contains(paramNames,'phase1')); 
phase1 = x(idx);
idx = find(contains(paramNames,'phase2')); 
phase2 = x(idx);

% --- Freq --- 
idx = find(contains(paramNames,'freq')); 
freq = x(idx); 
% *pi/(Fs/2); 

%% Predicted y 
switch fitType
    case 'linear2Hz'
        yhat1 = ((slope1*t) + intercept1)  + ( amplitude1 * sin( (freq*pi/(Fs/2)) * (t + phase1 )) );
        yhat2 = ((slope2*t) + intercept2)  + ( amplitude2 * sin( (freq*pi/(Fs/2)) * (t + phase2 )) );
    case 'linear'
        yhat1 = (slope1*t) + intercept1;
        yhat2 = (slope2*t) + intercept2;
end

%% Calculate rmse 
% diff = sum((y-yhat).^2); 
% E = sqrt(diff/length(y)); 

y1 = data1;
y1 = data1;

% Error to be minimized 
E = sum(rmse(yhat,y));






